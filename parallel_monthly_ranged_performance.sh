#!/bin/bash

# HISTORICAL / FORECASTED
IS_HISTORICAL_FLAG=true

if [ "$IS_HISTORICAL_FLAG" = true ]; then
    HISTORICAL_CLI_FLAG="--ih"
else
    HISTORICAL_CLI_FLAG=""
fi

# complete month range for system_marginal_prices you provided in data / inputs
python -u initialization.py $HISTORICAL_CLI_FLAG --cms 201501 --cme 202412


# ============================== FIXED PERFORMANCE PARAMETERS
# ============================== HISTORY

# all historical months / default ECR POR / 1 0 0 1 0 1 1 0 0 (default)
# all historical months / default ECR POR / SOH(1) SOCINI(0) SOCMINMAX(0 0.2 0.01) SDR(1) ECEDD(0.9 1 0.1) RBCRAD(0 4 1)
#


# ============================== MODEL PARAMETERS

# HISTORICAL / FORECASTED
IS_HISTORICAL_FLAG=true

# BATCH MONTH START & END
MONTH_START=202201
MONTH_END=202212

# ENERGY CAPACITY RATED
ENERGY_CAPACITY_RATED_START=10000
ENERGY_CAPACITY_RATED_INCREMENT=10000
ENERGY_CAPACITY_RATED_END=100000

# POWER OUTPUT RATED
POWER_OUTPUT_RATED_START=10000
POWER_OUTPUT_RATED_INCREMENT=10000
POWER_OUTPUT_RATED_END=100000

# STATE OF HEALTH
SOH_BASH_MIN=1
SOH_BASH_MAX=1
SOH_BASH_INC=1

# STATE OF CHARGE INITIAL
SOCINI_BASH_MIN=0
SOCINI_BASH_MAX=0
SOCINI_BASH_INC=1

# STATE OF CHARGE MAXIMUM = 1 - STATE OF CHARGE MINIMUM
# STATE OF CHARGE MINIMUM
SOCMIN_BASH_MIN=0
SOCMIN_BASH_MAX=0.2
SOCMIN_BASH_INC=0.02

# # STATE OF CHARGE MAXIMUM
# SOCMAX_BASH_MIN=1
# SOCMAX_BASH_MAX=1
# SOCMAX_BASH_INC=1

# SELF DISCHARGE RATE
SDR_BASH_MIN=0
SDR_BASH_MAX=0
SDR_BASH_INC=1

# EFFICIENCY DISCHARGE = EFFICIENCY CHARGE
# EFFICIENCY CHARGE
EC_BASH_MIN=0.9
EC_BASH_MAX=1
EC_BASH_INC=0.01

# # EFFICIENCY DISCHARGE
# ED_BASH_MIN=1
# ED_BASH_MAX=1
# ED_BASH_INC=1

# REST AFTER DISCHARGE = REST BEFORE CHARGE
# REST BEFORE CHARGE
RBC_BASH_MIN=0
RBC_BASH_MAX=4
RBC_BASH_INC=1

# # REST AFTER DISCHARGE
# RAD_BASH_MIN=0
# RAD_BASH_MAX=0
# RAD_BASH_INC=1


# ============================== DO NOT MAKE CHANGE

if [ "$IS_HISTORICAL_FLAG" = true ]; then
    HISTORICAL_CLI_FLAG="--ih"
else
    HISTORICAL_CLI_FLAG=""
fi

echo "============================================================"
echo -n "MONTHS: "
echo "$MONTH_START, ..., $MONTH_END"

FIRST=$ENERGY_CAPACITY_RATED_START
LAST=$(( (ENERGY_CAPACITY_RATED_END - ENERGY_CAPACITY_RATED_START) / ENERGY_CAPACITY_RATED_INCREMENT * ENERGY_CAPACITY_RATED_INCREMENT + ENERGY_CAPACITY_RATED_START ))
echo "ENERGY CAPACITY RATED (kWh): $FIRST, ..., $LAST (Δ = +$ENERGY_CAPACITY_RATED_INCREMENT)"

FIRST=$POWER_OUTPUT_RATED_START
LAST=$(( (POWER_OUTPUT_RATED_END - POWER_OUTPUT_RATED_START) / POWER_OUTPUT_RATED_INCREMENT * POWER_OUTPUT_RATED_INCREMENT + POWER_OUTPUT_RATED_START ))
echo "POWER OUTPUT RATED (kW): $FIRST, ..., $LAST (Δ = +$POWER_OUTPUT_RATED_INCREMENT)"
echo


for STATE_OF_HEALTH in $(seq $SOH_BASH_MIN $SOH_BASH_INC $SOH_BASH_MAX); do
for STATE_OF_CHARGE_INITIAL in $(seq $SOCINI_BASH_MIN $SOCINI_BASH_INC $SOCINI_BASH_MAX); do
for STATE_OF_CHARGE_MINIMUM in $(seq $SOCMIN_BASH_MIN $SOCMIN_BASH_INC $SOCMIN_BASH_MAX); do
for SELF_DISCHARGE_RATE in $(seq $SDR_BASH_MIN $SDR_BASH_INC $SDR_BASH_MAX); do
for EFFICIENCY_CHARGE in $(seq $EC_BASH_MIN $EC_BASH_INC $EC_BASH_MAX); do
for REST_BEFORE_CHARGE in $(seq $RBC_BASH_MIN $RBC_BASH_INC $RBC_BASH_MAX); do

    STATE_OF_CHARGE_MAXIMUM=$(awk "BEGIN {printf \"%.6f\", 1- $STATE_OF_CHARGE_MINIMUM}") # for STATE_OF_CHARGE_MAXIMUM in $(seq $SOCMAX_BASH_MIN $SOCMAX_BASH_INC $SOCMAX_BASH_MAX); do
    EFFICIENCY_DISCHARGE=$EFFICIENCY_CHARGE # for EFFICIENCY_DISCHARGE in $(seq $ED_BASH_MIN $ED_BASH_INC $ED_BASH_MAX); do
    REST_AFTER_DISCHARGE=$REST_BEFORE_CHARGE # for REST_AFTER_DISCHARGE in $(seq $RAD_BASH_MIN $RAD_BASH_INC $RAD_BASH_MAX); do

    echo -n "$(date +'%Y-%m-%d %H:%M:%S') | "
    echo -n "$STATE_OF_HEALTH $STATE_OF_CHARGE_INITIAL $STATE_OF_CHARGE_MINIMUM $STATE_OF_CHARGE_MAXIMUM "
    echo "$SELF_DISCHARGE_RATE $EFFICIENCY_CHARGE $EFFICIENCY_DISCHARGE $REST_BEFORE_CHARGE $REST_AFTER_DISCHARGE"

    CURRENT_YEAR=${MONTH_START:0:4}
    CURRENT_MONTH=${MONTH_START:4:2}

    while true; do
        MONTH=$(printf "%04d%02d" $CURRENT_YEAR $CURRENT_MONTH)

        if [ "$MONTH" -gt "$MONTH_END" ]; then
            break
        fi

        python -u parallel_monthly.py \
            $HISTORICAL_CLI_FLAG \
            --m "$MONTH" \
            --ecrs "$ENERGY_CAPACITY_RATED_START" \
            --ecri "$ENERGY_CAPACITY_RATED_INCREMENT" \
            --ecre "$ENERGY_CAPACITY_RATED_END" \
            --pors "$POWER_OUTPUT_RATED_START" \
            --pori "$POWER_OUTPUT_RATED_INCREMENT" \
            --pore "$POWER_OUTPUT_RATED_END" \
            --soh "$STATE_OF_HEALTH" \
            --socini "$STATE_OF_CHARGE_INITIAL" \
            --socmin "$STATE_OF_CHARGE_MINIMUM" \
            --socmax "$STATE_OF_CHARGE_MAXIMUM" \
            --sdr "$SELF_DISCHARGE_RATE" \
            --ec "$EFFICIENCY_CHARGE" \
            --ed "$EFFICIENCY_DISCHARGE" \
            --rbc "$REST_BEFORE_CHARGE" \
            --rad "$REST_AFTER_DISCHARGE" \
            > /dev/null 2>> errors.log

        if [ "$CURRENT_MONTH" -eq 12 ]; then
            CURRENT_MONTH=1
            CURRENT_YEAR=$((CURRENT_YEAR + 1))
        else
            CURRENT_MONTH=$((CURRENT_MONTH + 1))
        fi
    done

    # sleep 0.5

done; done; done; done; done; done #; done; done; done

echo "$(date +'%Y-%m-%d %H:%M:%S') | SIMULATION END"